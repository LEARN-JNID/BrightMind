require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
        user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
        sign_in user
        post = {
          title: 'string',
          mood: 'string',
          body: 'string',
          color: '92019'
        }
      Post.create(post)
      get posts_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
      sign_in user
      post_params = {
        post: {
          title: 'string',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }
      
      post '/posts', params: post_params
      post = Post.first
      post_id = post.id
      get "/cats/#{post_id}"

      show_post = Post.first
      expect(response).to be_successful
      expect(show_post.title).to eq 'string'
      expect(show_post.mood).to eq 'string'
      expect(show_post.body).to eq 'string'
      expect(show_post.color).to eq 'string'
    end
  end

  describe "POST /posts" do
    it "renders a successful response" do
      user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
      sign_in user
      post_params = {
        post: {
          title: 'string',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }
      
      post '/posts', params: post_params
      posts = Post.all

      expect(response).to be_successful
      expect(posts.length).to eq 1
    end

    it "doest not create a post without a title; renders a error response" do
      user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
      sign_in user
      post_params = {
        post: {
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }
      
      post '/posts', params: post_params
      post = JSON.parse(response.body)
      expect(response).to have_http_status(422)
      expect(post['title']).to include "can't be blank"
    end
  end

  describe "PATCH /posts/:id" do
    it "updates an existing post within the database" do
      user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
      sign_in user
      post_params = {
        post: {
          title: 'string',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }
      
      post '/posts', params: post_params

      edit_params = {
        post: {
          title: 'test',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }

      post = Post.first
      post_id = post.id
      patch "/posts/#{post_id}", params: edit_params

      edited_post = Post.first

      expect(response).to be_successful
      expect(edited_post.title).to eq 'test'
    end
  end

  describe "DELETE /posts/:id" do
    it "removes a post from the database" do
      user = User.where(email: 'test@example.com').first_or_create(password: '12345678', password_confirmation: '12345678')
      sign_in user
      post_params = {
        post: {
          title: 'string',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }
      
      post '/posts', params: post_params

      edit_params = {
        post: {
          title: 'test',
          mood: 'string',
          body: 'string',
          color: 'string'
        }
      }

      post = Post.first
      post_id = post.id
      delete "/posts/#{post_id}"

      expect(response).to be_successful
      expect(Post.all.length).to eq 0
    end
  end
end
